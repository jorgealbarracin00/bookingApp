<file name=admin.js path=/Users/jorgealbarracin/Library/Mobile Documents/com~apple~CloudDocs/2. KOI/6th Term/ICT302 Information Technology Project 2/booking-app/routes>
const express = require('express');
const router = express.Router();
const pool = require('../db'); // Assuming you have a db.js exporting a pool

router.get('/dashboard', async (req, res) => {
  try {
    const currentOffset = parseInt(req.query.weekOffset) || 0;

    // Calculate the dates for the week based on currentOffset
    const today = new Date();
    const startOfWeek = new Date(today);
    startOfWeek.setDate(today.getDate() + currentOffset * 7 - today.getDay() + 1); // Monday

    const weekDays = [];
    for (let i = 0; i < 7; i++) {
      const day = new Date(startOfWeek);
      day.setDate(startOfWeek.getDate() + i);
      const label = day.toLocaleDateString('en-US', { weekday: 'short' });
      const date = day.toISOString().slice(0, 10);
      weekDays.push({ label, date });
    }

    // Define time labels (e.g., every 30 minutes from 8:00 to 18:00)
    const timeLabels = [];
    for (let hour = 8; hour <= 18; hour++) {
      timeLabels.push((hour < 10 ? '0' : '') + hour + ':00');
      timeLabels.push((hour < 10 ? '0' : '') + hour + ':30');
    }

    // Initialize slotMap with all dates and times set to 'unavailable'
    let slotMap = {};

    weekDays.forEach(day => {
      const dateKey = day.date;
      slotMap[dateKey] = {};

      timeLabels.forEach(time => {
        slotMap[dateKey][time] = "unavailable";
      });
    });

    // Fetch available slots from DB
    const availableResult = await pool.query('SELECT date, time FROM slots WHERE status = $1 AND date >= $2 AND date <= $3', ['available', weekDays[0].date, weekDays[6].date]);

    availableResult.rows.forEach(row => {
      const cleanDate = row.date.toISOString().slice(0, 10);
      const cleanTime = row.time.toString().slice(0, 5).trim();
      if (slotMap[cleanDate] && slotMap[cleanDate][cleanTime] !== undefined) {
        slotMap[cleanDate][cleanTime] = "available";
      }
    });

    // Fetch booked slots from DB
    const bookedResult = await pool.query('SELECT date, time FROM slots WHERE status = $1 AND date >= $2 AND date <= $3', ['booked', weekDays[0].date, weekDays[6].date]);

    bookedResult.rows.forEach(row => {
      const cleanDate = row.date.toISOString().slice(0, 10);
      const cleanTime = row.time.toString().slice(0, 5).trim();
      if (slotMap[cleanDate] && slotMap[cleanDate][cleanTime] !== undefined) {
        slotMap[cleanDate][cleanTime] = "booked";
      }
    });

    res.render('admin', {
      weekDays,
      timeLabels,
      slotMap,
      currentOffset,
      today: today.toISOString().slice(0, 10),
      success: req.query.success,
      error: req.query.error
    });
  } catch (err) {
    console.error(err);
    res.render('admin', {
      weekDays: [],
      timeLabels: [],
      slotMap: {},
      currentOffset: 0,
      today: new Date().toISOString().slice(0, 10),
      success: false,
      error: true
    });
  }
});

module.exports = router;
</file>